@using Pixel.Identity.Server.Utilities
@inject TokenProvider TokenService

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" >
              <NotAuthorized>
                    @if (!context.User.Identity.IsAuthenticated)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p>You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    [Parameter]
    public TokenProvider InitialState { get; set; }   

    protected override Task OnInitializedAsync()
    {
        TokenService.AccessToken = InitialState.AccessToken;
        TokenService.RefreshToken = InitialState.RefreshToken;

        Console.WriteLine($"APP初始化获取AccessToken={TokenService.AccessToken}, RefreshToken={TokenService.RefreshToken}");
          
        return base.OnInitializedAsync();
    }
}